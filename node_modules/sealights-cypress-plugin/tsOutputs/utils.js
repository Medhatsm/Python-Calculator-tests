"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeError = exports.checkAgentLoaded = exports.constructTestName = void 0;
function constructTestName(suiteName, testName) {
    return `${suiteName} - ${testName}`;
}
exports.constructTestName = constructTestName;
function checkAgentLoaded(win, intervalMs = 100, timeoutSeconds = 5) {
    return new Promise((resolve) => {
        const start = Date.now();
        const intervalId = setInterval(() => {
            if (win['$SealightsAgent'] !== undefined) {
                clearInterval(intervalId);
                resolve(true);
            }
            else {
                const elapsed = Date.now() - start;
                if (elapsed >= timeoutSeconds * 1000) {
                    clearInterval(intervalId);
                    resolve(false);
                }
            }
        }, intervalMs);
    });
}
exports.checkAgentLoaded = checkAgentLoaded;
function sanitizeError(error) {
    var _a, _b, _c, _d, _e, _f, _g;
    const sanitizedError = new Error('An error occurred');
    sanitizedError.stack = undefined;
    sanitizedError.name = error.name;
    sanitizedError.message = error.message;
    const response = {};
    response.statusText = (_a = error.response) === null || _a === void 0 ? void 0 : _a.statusText;
    response.status = (_b = error.response) === null || _b === void 0 ? void 0 : _b.status;
    response.data = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data;
    response.url = (_e = (_d = error.response) === null || _d === void 0 ? void 0 : _d.config) === null || _e === void 0 ? void 0 : _e.url;
    response.baseURL = (_g = (_f = error.response) === null || _f === void 0 ? void 0 : _f.config) === null || _g === void 0 ? void 0 : _g.baseURL;
    const filteredResponse = removeEmpty(response);
    if (Object.keys(filteredResponse).length) {
        sanitizedError.response = filteredResponse;
    }
    return sanitizedError;
}
exports.sanitizeError = sanitizeError;
function removeEmpty(obj) {
    const newObj = {};
    Object.keys(obj).forEach((key) => {
        if (obj[key] === Object(obj[key]))
            newObj[key] = removeEmpty(obj[key]);
        else if (obj[key] !== undefined)
            newObj[key] = obj[key];
    });
    return newObj;
}
//# sourceMappingURL=utils.js.map