"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerSealightsTasks = void 0;
const const_1 = require("./const");
const sealights_service_1 = require("./sealights-service");
const utils_1 = require("./utils");
const registerSealightsTasks = (on, config) => {
    const slConfig = {
        buildsessionid: config.env[const_1.SL_CYPRESS_ENVIRONMENT.BUILD_SESSION_ID],
        token: config.env[const_1.SL_CYPRESS_ENVIRONMENT.TOKEN],
        teststage: config.env[const_1.SL_CYPRESS_ENVIRONMENT.TEST_STAGE],
        labid: config.env[const_1.SL_CYPRESS_ENVIRONMENT.LAB_ID],
    };
    sealights_service_1.SealightsTestSessionService.setConfig(slConfig.token, slConfig.teststage, slConfig.buildsessionid, slConfig.labid);
    on('task', {
        [const_1.SL_REPORT_TEST_END_TASK]({ suiteName, testName, duration, state }) {
            return __awaiter(this, void 0, void 0, function* () {
                const name = (0, utils_1.constructTestName)(suiteName, testName);
                const start = Date.now() - duration;
                const end = Date.now();
                yield sealights_service_1.SealightsTestSessionService.sendTestEvent(name, start, end, state);
                return null;
            });
        },
        [const_1.SL_START_TEST_SESSION]() {
            return __awaiter(this, void 0, void 0, function* () {
                yield sealights_service_1.SealightsTestSessionService.createTestSession();
                return yield sealights_service_1.SealightsTestSessionService.getTestRecommendations();
            });
        },
        [const_1.SL_END_TEST_SESSION]() {
            return __awaiter(this, void 0, void 0, function* () {
                yield sealights_service_1.SealightsTestSessionService.endTestSession();
                return null;
            });
        },
    });
    config.env[const_1.SL_TASKS_REGISTERED] = true;
    return config;
};
exports.registerSealightsTasks = registerSealightsTasks;
//# sourceMappingURL=config.js.map